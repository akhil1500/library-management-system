openapi: 3.0.0
info:
  title: Library Management System API
  description: RESTful API for managing books, users, and borrowing history in a library management system
  version: 1.0.0
servers:
  - url: http://localhost:3000/olms/v1
    description: Local development server
tags:
  - name: Authentication
    description: API endpoints for authentication
  - name: Books
    description: API endpoints for managing books
  - name: Borrowing History
    description: API endpoints for borrowing history
  - name: Users
    description: API endpoints for managing users
paths:
  /auth/login:
    post:
      summary: Authenticate user and generate JWT token.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: Successful authentication. Returns JWT token.
        '401':
          description: Unauthorized. Invalid credentials.
  /books:
    get:
      summary: Retrieve a list of all books with quantity details.
      tags:
        - Books
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of books with quantity details.
    post:
      summary: Add a new book to the collection.
      tags:
        - Books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Book added successfully.
  /books/{id}:
    get:
      summary: Retrieve details of a specific book by ID.
      tags:
        - Books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the book to retrieve.
      responses:
        '200':
          description: Details of the book.
        '404':
          description: Book not found.
    put:
      summary: Update details of a specific book by ID, including quantity changes.
      tags:
        - Books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the book to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '200':
          description: Book details updated successfully.
        '404':
          description: Book not found.
    delete:
      summary: Delete a specific book by ID.
      tags:
        - Books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the book to delete.
      responses:
        '200':
          description: Book deleted successfully.
        '404':
          description: Book not found.
  /borrow-history:
    get:
      summary: Retrieve a list of all borrowing history entries.
      tags:
        - Borrowing History
      responses:
        '200':
          description: A list of borrowing history entries.
    post:
      summary: Allow a user to borrow a book, updating the quantity in stock.
      tags:
        - Borrowing History
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowingHistoryInput'
      responses:
        '200':
          description: Book borrowed successfully. Returns borrowing history entry.
        '400':
          description: Bad request. Invalid data provided.
  /borrow-history/{id}:
    get:
      summary: Retrieve details of a specific borrowing history entry by ID.
      tags:
        - Borrowing History
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the borrowing history entry to retrieve.
      responses:
        '200':
          description: Details of the borrowing history entry.
        '404':
          description: Borrowing history entry not found.
    put:
      summary: Allow a user to return a book, updating the borrowing history.
      tags:
        - Borrowing History
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the borrowing history entry to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowingHistoryReturnInput'
      responses:
        '200':
          description: Book returned successfully. Returns updated borrowing history entry.
        '400':
          description: Bad request. Invalid data provided.
  /users:
    get:
      summary: Retrieve a list of all users.
      tags:
        - Users
      responses:
        '200':
          description: A list of users.
    post:
      summary: Add a new user to the system.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User added successfully.
  /users/{id}:
    get:
      summary: Retrieve details of a specific user by ID.
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user to retrieve.
      responses:
        '200':
          description: Details of the user.
        '404':
          description: User not found.
    put:
      summary: Update details of a specific user by ID.
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User details updated successfully.
        '404':
          description: User not found.
    delete:
      summary: Delete a specific user by ID.
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user to delete.
      responses:
        '200':
          description: User deleted successfully.
        '404':
          description: User not found.
components:
  schemas:
    LoginInput:
      type: object
      properties:
        email:
          type: string
          description: User's email address.
        password:
          type: string
          description: User's password.
    BookInput:
      type: object
      properties:
        title:
          type: string
          description: The title of the book.
        author:
          type: string
          description: The author of the book.
        genre:
          type: string
          description: The genre of the book.
        published_year:
          type: integer
          description: The published year of the book.
        isbn:
          type: string
          description: The ISBN of the book.
        quantity_in_stock:
          type: integer
          description: The quantity of the book in stock.
    BorrowingHistoryInput:
      type: object
      properties:
        user_id:
          type: string
          description: The ID of the user borrowing the book.
        bookId:
          type: string
          description: The ID of the book being borrowed.
        borrowed_date:
          type: string
          format: date
          description: The date when the book was borrowed.
    BorrowingHistoryReturnInput:
      type: object
      properties:
        return_date:
          type: string
          format: date
          description: The date when the book was returned.
    UserInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the user.
        email:
          type: string
          format: email
          description: The email address of the user.
        password:
          type: string
          description: The password of the user.
        role:
          type: string
          enum: [Member, Librarian]
          description: The role of the user.
